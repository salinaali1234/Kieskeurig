package nl.hva.kieskeurig.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import nl.hva.kieskeurig.security.SecureHasher;
import com.fasterxml.jackson.annotation.JsonIgnore;


import java.util.*;

@Setter
@Getter
@NamedQueries({
        @NamedQuery(name="Accounts_find_by_email",
                query = "select a from Account a where a.email = ?1")
})
@Entity
public class Account {

    @SequenceGenerator(name="Account_ids", initialValue=100001)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator="Account_ids")
    @Id
    private long id = 0L;     // identification of an Author
    // unique id-s are generated by the back-end persistence layer

    private String name;
    private String email = "";

    private String role = "Regular User";

    @JsonIgnore
    private String hashedPassword = null;

    public Account() {
    }

    public Account(long id) {
        this.id = id;
    }
    public Account(long id, String email, String name) {
        this(id);
        this.setEmail(email);
        this.setName(name);
    }

    /**
     * Hash the given password in combination with the account identification (id)
     * and some extra characters for extra security.
     * Different accounts with the same password will deliver different hashes
     * @param password
     */
    public String hashPassword(String password) {
        return SecureHasher.secureHash("Id-" + this.getId() + ":" + password);
    }
    public void setPassword(String newPassword) {
        this.setHashedPassword(this.hashPassword(newPassword));
    }

    /**
     * Verify whether the hash of the given password
     * matches the correct hash of the account's true password
     * (without actually knowing the correct password: only its hash has been kept in store)
     * @param password
     * @return
     */
    public boolean verfiyPassword(String password) {
        return this.hashPassword(password).equals(this.getHashedPassword());
    }

    private static Random randomizer = new Random();

    public static Account createSample(long id) {
        return createSample(id, callNames[randomizer.nextInt(Account.callNames.length)]);
    }
    public static Account createSample(long id, String callName) {
        Account newAuthor = new Account(id, callName.toLowerCase()+"@hva.nl", callName);
        // password needs to be reset later, the password hash changes if the account id changes.
        newAuthor.setPassword("welcome");
        return newAuthor;
    }

    private static final String[] callNames = {
            "Boekenwurm", "Pageturner", "Papiervreter", "Hobbyist", "Philosopher", "Journalist", "Scientist", "Teacher"
    };

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Account)) return false;
        return id == ((Account) o).id;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public String toString() {
        return String.format("{ login=%s, callName=%s, id=%d }", this.email, this.name, this.id);
    }
}
